{"version":3,"sources":["Components/Editor/_config.js","Components/Editor/_schema.js","Components/Editor/components.js","Components/Editor/Editor.js","Components/Common/Header.js","Components/App.js","serviceWorker.js","index.js"],"names":["DEFAULT_NODE","schema","blocks","image","isVoid","Button","styled","_templateObject","props","reversed","active","Icon","_ref","className","rest","Object","objectWithoutProperties","react_default","a","createElement","assign","concat","_templateObject2","Menu","_templateObject3","Toolbar","_templateObject4","Image","_templateObject5","selected","isBoldHotkey","isKeyHotkey","isItalicHotkey","isUnderlinedHotkey","isCodeHotkey","isTabHotkey","isShiftTabHotkey","isImage","url","imageExtensions","find","endsWith","insertImage","editor","src","target","select","insertBlock","type","data","storedValue","JSON","parse","localStorage","getItem","Value","fromJSON","initialValue","storedNodeLimit","DemoEditor","state","value","openSettingsMenu","nodeLimit","saveButtonDisabled","alert","imageUrl","hasMark","_this","activeMarks","some","mark","hasBlock","node","ref","renderMarkButton","icon","isActive","onMouseDown","event","onClickMark","renderBlockButton","includes","document","size","parent","getParent","first","key","id","onChange","onClickBlock","renderNode","next","attributes","children","isFocused","get","renderMark","setState","parseInt","blockCounter","onKeyDown","block","previousSibling","getPreviousSibling","preventDefault","getDepth","setBlocks","wrapBlock","firstBlockDepth","multiLevelSelected","map","currentKey","currentDepth","unwrapBlock","toggleMark","getImageUrlPrompt","hideAlert","react_bootstrap_sweetalert_default","input","showCancel","cancelBtnBsStyle","confirmBtnBsStyle","title","placeHolder","onConfirm","onCancel","file","assertThisInitialized","currentTarget","files","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","then","imageData","command","isList","isType","getClosest","openSettingsTrigger","prevState","setNodeLimit","e","saveNodeLimit","setItem","getBlocks","onDropOrPaste","getEventRange","transfer","getEventTransfer","text","isUrl","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","_file$type$split","split","slicedToArray","addEventListener","_iterator","Symbol","iterator","done","err","return","saveData","currentData","stringify","toJSON","cancelChanges","currentStoredData","previousData","this","prevProps","_this$state","onClick","htmlFor","name","placeholder","slate_react_es","spellCheck","autoFocus","onDrop","onPaste","disabled","Component","withAlert","Header","App","Common_Header","Editor","Boolean","window","location","hostname","match","ReactDOM","render","react_alert","template","AlertTemplate","position","timeout","offset","transition","Components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAEeA,EAFM,YCQNC,EARA,CACXC,OAAQ,CACJC,MAAO,CACHC,QAAQ,yxBCAb,IAAMC,EAASC,YAAO,OAAPA,CAAHC,IAER,SAAAC,GAAK,OAAKA,EAAMC,SACjBD,EAAME,OAAS,QAAU,UACzBF,EAAME,OAAS,UAAY,UAGxBC,EAAOL,YAAO,SAAAM,GAAA,IAAGC,EAAHD,EAAGC,UAAcC,EAAjBC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,sBAA4BK,EAAAC,EAAAC,cAAA,OAAAJ,OAAAK,OAAA,CAAMP,UAAS,kBAAAQ,OAAoBR,IAAiBC,KAAvFR,CAAHgB,KAKJC,EAAOjB,YAAO,MAAPA,CAAHkB,KAUJC,EAAUnB,YAAOiB,EAAPjB,CAAHoB,KASPC,EAAQrB,YAAO,MAAPA,CAAHsB,IAIJ,SAAApB,GAAK,OAAKA,EAAMqB,SAAW,kBAAoB,SCXvDC,EAAeC,sBAAY,SAC3BC,EAAiBD,sBAAY,SAC7BE,EAAqBF,sBAAY,SACjCG,EAAeH,sBAAY,SAC3BI,EAAcJ,sBAAY,OAC1BK,EAAmBL,sBAAY,aAS/BM,EAAU,SAAAC,GAAG,QAAOC,EAAgBC,KAAKF,EAAIG,WAU7CC,EAAc,SAACC,EAAQC,EAAKC,GAC1BA,GACAF,EAAOG,OAAOD,GAGlBF,EAAOI,YAAY,CACfC,KAAM,QACNC,KAAM,CAAEL,UAOVM,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,SAC9CL,EAAOM,IAAMC,SAASN,GAAeO,GACrCC,EAAkBL,aAAaC,QAAQ,aAEvCK,6MACFC,MAAQ,CACJC,MAAOZ,EACPa,kBAAkB,EAClBC,UAAWL,GAAmB,EAC9BM,oBAAoB,EACpBC,MAAO,KACPC,SAAU,QAkCdC,QAAU,SAACnB,GAEP,OADkBoB,EAAKR,MAAfC,MACKQ,YAAYC,KAAK,SAAAC,GAAI,OAAIA,EAAKvB,OAASA,OAUxDwB,SAAW,SAACxB,GAER,OADkBoB,EAAKR,MAAfC,MACK3D,OAAOoE,KAAK,SAAAG,GAAI,OAAIA,EAAKzB,OAASA,OASnD0B,IAAM,SAAC/B,GACHyB,EAAKzB,OAASA,KAWlBgC,iBAAmB,SAAC3B,EAAM4B,GACtB,IAAMC,EAAWT,EAAKD,QAAQnB,GAE9B,OACI/B,EAAAC,EAAAC,cAACd,EAAD,CAAQK,OAAQmE,EAAUC,YAAa,SAAAC,GAAK,OAAIX,EAAKY,YAAYD,EAAO/B,KACpE/B,EAAAC,EAAAC,cAACR,EAAD,KAAOiE,OAanBK,kBAAoB,SAACjC,EAAM4B,GACvB,IAAIC,EAAWT,EAAKI,SAASxB,GAE7B,GAAI,CAAC,gBAAiB,iBAAiBkC,SAASlC,GAAO,KAC3Ca,EAAUO,EAAKR,MAAfC,MACAsB,EAAqBtB,EAArBsB,SAAUjF,EAAW2D,EAAX3D,OAElB,GAAIA,EAAOkF,KAAO,EAAG,CACjB,IAAMC,EAASF,EAASG,UAAUpF,EAAOqF,QAAQC,KACjDX,EAAWT,EAAKI,SAAS,cAAgBa,GAAUA,EAAOrC,OAASA,GAG3E,MAAI,CAAC,gBAAgBkC,SAASlC,GAEtB/B,EAAAC,EAAAC,cAAA,OAAKN,UAAU,sBACXI,EAAAC,EAAAC,cAACd,EAAD,CAAQK,OAAQmE,GACZ5D,EAAAC,EAAAC,cAACR,EAAD,KAAOiE,GACP3D,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,OAAOyC,GAAG,eAAeC,SAAU,SAAAX,GAAK,OAAIX,EAAKuB,aAAaZ,EAAO/B,QAM7F/B,EAAAC,EAAAC,cAACd,EAAD,CAAQK,OAAQmE,EAAUC,YAAa,SAAAC,GAAK,OAAIX,EAAKuB,aAAaZ,EAAO/B,KACrE/B,EAAAC,EAAAC,cAACR,EAAD,KAAOiE,OAYnBgB,WAAa,SAACpF,EAAOmC,EAAQkD,GAAS,IAE9BC,EAIAtF,EAJAsF,WACAC,EAGAvF,EAHAuF,SACAtB,EAEAjE,EAFAiE,KACAuB,EACAxF,EADAwF,UAGJ,OAAQvB,EAAKzB,MACb,IAAK,cACD,OAAO/B,EAAAC,EAAAC,cAAA,aAAgB2E,EAAaC,GACxC,IAAK,gBACD,OAAO9E,EAAAC,EAAAC,cAAA,KAAQ2E,EAAaC,GAChC,IAAK,cACD,OAAO9E,EAAAC,EAAAC,cAAA,KAAQ2E,EAAaC,GAChC,IAAK,cACD,OAAO9E,EAAAC,EAAAC,cAAA,KAAQ2E,EAAaC,GAChC,IAAK,YACD,OAAO9E,EAAAC,EAAAC,cAAA,KAAQ2E,EAAaC,GAChC,IAAK,gBACD,OAAO9E,EAAAC,EAAAC,cAAA,KAAQ2E,EAAaC,GAChC,IAAK,QACD,IAAMnD,EAAM6B,EAAKxB,KAAKgD,IAAI,OAC1B,OAAOhF,EAAAC,EAAAC,cAACQ,EAADZ,OAAAK,OAAA,CAAOwB,IAAKA,EAAKf,SAAUmE,GAAeF,IAErD,QACI,OAAOD,QAWfK,WAAa,SAAC1F,EAAOmC,EAAQkD,GAAS,IAC1BE,EAA+BvF,EAA/BuF,SAAUxB,EAAqB/D,EAArB+D,KAAMuB,EAAetF,EAAfsF,WAExB,OAAQvB,EAAKvB,MACb,IAAK,OACD,OAAO/B,EAAAC,EAAAC,cAAA,SAAY2E,EAAaC,GACpC,IAAK,OACD,OAAO9E,EAAAC,EAAAC,cAAA,OAAU2E,EAAaC,GAClC,IAAK,SACD,OAAO9E,EAAAC,EAAAC,cAAA,KAAQ2E,EAAaC,GAChC,IAAK,aACD,OAAO9E,EAAAC,EAAAC,cAAA,IAAO2E,EAAaC,GAC/B,QACI,OAAOF,QAWfH,SAAW,SAAA9E,GAAe,IAAZiD,EAAYjD,EAAZiD,MACFE,EAAcK,EAAKR,MAAnBG,UACRK,EAAK+B,SAAS,CACVnC,sBAAmD,IAA5BoC,SAASrC,EAAW,KAAaK,EAAKiC,eAAiBD,SAASrC,EAAW,KAClGF,aAaRyC,UAAY,SAACvB,EAAOpC,EAAQkD,GACxB,IAAItB,EAEIV,EAAUlB,EAAVkB,MACAsB,EAAatB,EAAbsB,SAEFoB,EAAQ1C,EAAM3D,OAAOqF,QACrBF,EAASkB,EAAQpB,EAASG,UAAUiB,EAAMf,KAAO,KAEvD,GAAIrD,EAAY4C,GAAQ,CACpB,IAAMyB,EAAkBrB,EAASsB,mBAAmBF,EAAMf,KACpDxC,EAAQqC,EAAOrC,KAAyBqC,EAAOrC,KAAzB,gBAI5B,GAHAuB,EAAOvB,GAGFwD,EAED,OADAzB,EAAM2B,iBACCb,IAKX,GADcV,EAASwB,SAASJ,EAAMf,KAC1B,EAER,OADAT,EAAM2B,iBACCb,IAGPR,GACA1C,EAAOiE,UAAU,aAAaC,UAAU7D,QAEzC,GAAIZ,EAAiB2C,GAAQ,CAEhCR,EADcc,EAAOrC,KAAyBqC,EAAOrC,KAAzB,gBAI5B,IAAM8D,EAAkBP,GAASpB,EAASwB,SAASJ,EAAMf,KACrDuB,GAAqB,EAMzB,GALAlD,EAAM3D,OAAO8G,IAAI,SAACC,GACd,IAAMC,EAAe/B,EAASwB,SAASM,EAAWzB,KAElD,OADAuB,IAAwBD,IAAoBI,IACrC,IAEPH,EAAoB,OAAOlB,IAG/B,GAAIR,GAAiC,qBAAhBA,EAAOrC,KAKxB,OAJAL,EACKiE,UAAU5G,GACVmH,YAAY,iBACZA,YAAY,iBACVtB,IAGMzB,EAAKI,SAAS,cAAgB+B,IAA0B,kBAAhBlB,EAAOrC,MAA4C,kBAAhBqC,EAAOrC,MAG/FL,EACKiE,UAAU,aACVO,YAAY,iBACZA,YAAY,iBAEjBxE,EACKiE,UAAU5G,GACVmH,YAAY,iBACZA,YAAY,sBAElB,GAAIrF,EAAaiD,GACpBR,EAAO,YACJ,GAAIvC,EAAe+C,GACtBR,EAAO,cACJ,GAAItC,EAAmB8C,GAC1BR,EAAO,iBACJ,KAAIrC,EAAa6C,GAGpB,OAAOc,IAFPtB,EAAO,OAKXQ,EAAM2B,iBACN/D,EAAOyE,WAAW7C,MAUtBS,YAAc,SAACD,EAAO/B,GAClB+B,EAAM2B,iBACNtC,EAAKzB,OAAOyE,WAAWpE,MAO3BqE,kBAAoB,WAChB,IAAMC,EAAY,WACdlD,EAAK+B,SAAS,CACVlC,MAAO,QAuBfG,EAAK+B,SAAS,CACVlC,MApBAhD,EAAAC,EAAAC,cAACoG,EAAArG,EAAD,CACEsG,OAAK,EACLC,YAAU,EACVC,iBAAiB,UACjBC,kBAAkB,UAClBC,MAAM,wBACNC,YAAY,kBACZC,UAAW,SAACjE,GACNO,EAAK+B,SAAS,CACVjC,SAAUL,IAEdyD,KAENS,SAAU,kBAAMT,MAblB,aA+BR3B,aAAe,SAACZ,EAAO/B,GACnB+B,EAAM2B,iBADsB,IAoBNsB,EAjBdrF,EAHoB5B,OAAAkH,EAAA,EAAAlH,QAAAkH,EAAA,EAAAlH,CAAAqD,IAGpBzB,OACAkB,EAAUlB,EAAVkB,MACAsB,EAAatB,EAAbsB,SACAlB,EAAUG,EAAK5D,MAAfyD,MAOR,GALI,CAAC,SAASiB,SAASlC,IAEnBoB,EAAKiD,oBAGL,CAAC,gBAAgBnC,SAASlC,GAAO,EAOfgF,EAURjD,EAAMmD,cAAcC,MAAM,GAVV,IAAIC,QAAQ,SAACC,EAASC,GAC5C,IAAMC,EAAS,IAAIC,WACD,eAAdR,EAAKhF,MAITuF,EAAOE,cAAcT,GACrBO,EAAOG,OAAS,kBAAML,EAAQE,EAAOI,SACrCJ,EAAOK,QAAU,SAAAC,GAAK,OAAIP,EAAOO,KAL7B5E,EAAM4E,MAAM,qBAQfC,KAAK,SAACC,GAEHpG,EAAOqG,QAAQtG,EAAaqG,KAKxC,GAAa,kBAAT/F,GAAqC,kBAATA,EAA0B,CACtD,IAAM6B,EAAWT,EAAKI,SAASxB,GAChBoB,EAAKI,SAAS,aAGzB7B,EACKiE,UAAU/B,EAAW7E,EAAegD,GACpCmE,YAAY,iBACZA,YAAY,iBAEjBxE,EAAOiE,UAAU/B,EAAW7E,EAAegD,OAE5C,CAEH,IAAMiG,EAAS7E,EAAKI,SAAS,aACvB0E,EAASrF,EAAM3D,OAAOoE,KAAK,SAAAiC,GAAK,QAAMpB,EAASgE,WAAW5C,EAAMf,IAAK,SAAAH,GAAM,OAAIA,EAAOrC,OAASA,MAEjGiG,GAAUC,EACVvG,EACKiE,UAAU5G,GACVmH,YAAY,iBACZA,YAAY,iBACV8B,EACPtG,EACKwE,YACY,kBAATnE,EAA2B,gBAAkB,iBAEhD6D,UAAU7D,GAEfL,EAAOiE,UAAU,aAAaC,UAAU7D,OASpDoG,oBAAsB,WAClBhF,EAAK+B,SAAS,SAAAkD,GAAS,MAAK,CACxBvF,kBAAmBuF,EAAUvF,uBASrCwF,aAAe,SAACC,GACZA,EAAE7C,iBADgB,IAEV7C,EAAU0F,EAAE1G,OAAZgB,MACRO,EAAK+B,SAAS,CACVpC,UAAWF,EACXG,sBAA+C,IAAxBoC,SAASvC,EAAO,KAAaO,EAAKiC,eAAiBD,SAASvC,EAAO,UAQlG2F,cAAgB,WAAM,IACVzF,EAAcK,EAAKR,MAAnBG,UACRV,aAAaoG,QAAQ,YAAa1F,MAQtCsC,aAAe,WAGX,OAHiBtF,OAAAkH,EAAA,EAAAlH,QAAAkH,EAAA,EAAAlH,CAAAqD,IACTzB,OACAkB,MACKsB,SAASuE,YAAYtE,QAWtCuE,cAAgB,SAAC5E,EAAOpC,EAAQkD,GAC5B,IAAMhD,EAAS+G,YAAc7E,EAAOpC,GACpC,IAAKE,GAAyB,SAAfkC,EAAM/B,KAAiB,OAAO6C,IAE7C,IAAMgE,EAAWC,YAAiB/E,GAC1B/B,EAAsB6G,EAAtB7G,KAAM+G,EAAgBF,EAAhBE,KAAM5B,EAAU0B,EAAV1B,MAEpB,GAAa,UAATnF,EAAJ,CAgBA,GAAa,SAATA,EACA,OAAKgH,IAAMD,IACN1H,EAAQ0H,QACbpH,EAAOqG,QAAQtG,EAAaqH,EAAMlH,GAFTgD,IAM7BA,QAvBA,CAAsB,IAAAoE,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAElB,IAFkB,IAElBC,EAFkBC,EAAA,eAEPtC,EAFOqC,EAAAxG,MAGR0E,EAAS,IAAIC,WAHL+B,EAICvC,EAAKhF,KAAKwH,MAAM,KAC/B,GAAa,UALCzJ,OAAA0J,EAAA,EAAA1J,CAAAwJ,EAAA,MAKQ,iBAEtBhC,EAAOmC,iBAAiB,OAAQ,WAC5B/H,EAAOqG,QAAQtG,EAAa6F,EAAOI,OAAQ9F,KAG/C0F,EAAOE,cAAcT,IATzB2C,EAAmBxC,EAAnByC,OAAAC,cAAAZ,GAAAI,EAAAM,EAAA9E,QAAAiF,MAAAb,GAAA,EAA0BK,IAFR,MAAAS,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAU,EAAAK,QAAAL,EAAAK,SAAA,WAAAd,EAAA,MAAAC,QA8B1Bc,SAAW,WAAM,IACLpH,EAAUO,EAAKR,MAAfC,MACFqH,EAAc/H,KAAKgI,UAAUtH,EAAMuH,UACzC/H,aAAaoG,QAAQ,OAAQyB,MAOjCG,cAAgB,WACZ,IAAMC,EAAoBnI,KAAKC,MAAMC,aAAaC,QAAQ,SACpDiI,EAAehI,IAAMC,SAAS8H,GAAqB7H,GACzDW,EAAK+B,SAAS,CACVtC,MAAO0H,wFA7fK,IACRxH,EAAcyH,KAAK5H,MAAnBG,UAIRyH,KAAKrF,SAAS,CACVnC,sBAAmD,IAA5BoC,SAASrC,EAAW,KAAayH,KAAKnF,eAAiBD,SAASrC,EAAW,kDAIvF0H,EAAWpC,GAAW,IAC7BnF,EAAasH,KAAK5H,MAAlBM,SAOR,GAAImF,EAAUnF,WAAaA,EAAU,CACjC,IAAKA,EAAU,OACfsH,KAAK7I,OAAOqG,QAAQtG,EAAawB,qCAmfhC,IAAAwH,EAODF,KAAK5H,MALLC,EAFC6H,EAED7H,MACAC,EAHC4H,EAGD5H,iBACAC,EAJC2H,EAID3H,UACAC,EALC0H,EAKD1H,mBACAC,EANCyH,EAMDzH,MAGJ,OACIhD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACM,EAAD,KACK+J,KAAK7G,iBAAiB,OAAQ,eAC9B6G,KAAK7G,iBAAiB,SAAU,iBAChC6G,KAAK7G,iBAAiB,aAAc,qBACpC6G,KAAK7G,iBAAiB,OAAQ,QAC9B6G,KAAKvG,kBAAkB,cAAe,aACtCuG,KAAKvG,kBAAkB,cAAe,aACtCuG,KAAKvG,kBAAkB,cAAe,gBACtCuG,KAAKvG,kBAAkB,gBAAiB,wBACxCuG,KAAKvG,kBAAkB,gBAAiB,wBACxCuG,KAAKvG,kBAAkB,QAAS,SAChCuG,KAAKvG,kBAAkB,eAAgB,gBACxChE,EAAAC,EAAAC,cAAA,OAAKN,UAAU,eACXI,EAAAC,EAAAC,cAAA,OAAKN,UAAU,YACXI,EAAAC,EAAAC,cAAA,UAAQwK,QAASH,KAAKpC,oBAAqBvI,UAAU,aAAamC,KAAK,UACnE/B,EAAAC,EAAAC,cAACR,EAAD,CAAME,UAAU,gBAAhB,aAEJI,EAAAC,EAAAC,cAAA,OAAKN,UAAS,qCAAAQ,OAAuCyC,EAAmB,UAAY,WAChF7C,EAAAC,EAAAC,cAAA,OAAKN,UAAU,sBACXI,EAAAC,EAAAC,cAAA,OAAKN,UAAU,mBACXI,EAAAC,EAAAC,cAAA,SAAON,UAAU,wBAAwB+K,QAAQ,aAAjD,2CAEI3K,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,SAASa,MAAOE,EAAW8H,KAAK,YAAYnG,SAAU8F,KAAKlC,aAAczI,UAAU,oBAAoB4E,GAAG,YAAYqG,YAAY,oBAI1J7K,EAAAC,EAAAC,cAAA,OAAKN,UAAU,sBACXI,EAAAC,EAAAC,cAAA,UAAQwK,QAASH,KAAKhC,cAAexG,KAAK,SAASnC,UAAU,2CAA7D,QACAI,EAAAC,EAAAC,cAAA,UAAQwK,QAASH,KAAKpC,oBAAqBpG,KAAK,SAASnC,UAAU,oCAAnE,cAOpBI,EAAAC,EAAAC,cAAC4K,EAAA,EAAD,CACEC,YAAU,EACVC,WAAS,EACTH,YAAY,0BACZpH,IAAK8G,KAAK9G,IACVb,MAAOA,EACP6B,SAAU8F,KAAK9F,SACfY,UAAWkF,KAAKlF,UAChBV,WAAY4F,KAAK5F,WACjBM,WAAYsF,KAAKtF,WACjBjG,OAAQA,EACRiM,OAAQV,KAAK7B,cACbwC,QAASX,KAAK7B,gBAEhB1I,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQwK,QAASH,KAAKP,SAAUmB,SAAQ,GAAA/K,OAAK2C,EAAqB,WAAa,IAAMhB,KAAK,SAASnC,UAAU,oCAA7G,QACAI,EAAAC,EAAAC,cAAA,UAAQwK,QAASH,KAAKH,cAAerI,KAAK,SAASnC,UAAU,8BAA7D,UACCoD,UAhlBQoI,aAslBVC,cAAU3I,GC3oBV4I,EAdA,kBACXtL,EAAAC,EAAAC,cAAA,OAAKN,UAAU,gDACXI,EAAAC,EAAAC,cAAA,OAAKN,UAAU,WACXI,EAAAC,EAAAC,cAAA,OAAKN,UAAU,iDACXI,EAAAC,EAAAC,cAAA,KAAGN,UAAU,wBAAb,yBACAI,EAAAC,EAAAC,cAAA,KAAGN,UAAU,gCAAb,aAEII,EAAAC,EAAAC,cAAA,yBCaLqL,oLAfP,OACIvL,EAAAC,EAAAC,cAAA,OAAKN,UAAU,OACXI,EAAAC,EAAAC,cAACsL,EAAD,MACAxL,EAAAC,EAAAC,cAAA,OAAKN,UAAU,kBACXI,EAAAC,EAAAC,cAAA,OAAKN,UAAU,OACXI,EAAAC,EAAAC,cAAA,OAAKN,UAAU,qCACXI,EAAAC,EAAAC,cAACuL,EAAD,iBARVL,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJNC,IAASC,OACLhM,EAAAC,EAAAC,cAAC+L,EAAA,EAADnM,OAAAK,OAAA,CAAe+L,SAAUC,KARb,CACZC,SAAU,aACVC,QAAS,IACTC,OAAQ,OACRC,WAAY,UAKRvM,EAAAC,EAAAC,cAACsM,GAAD,OAEJtI,SAASuI,eAAe,SD+GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/E,KAAK,SAAAgF,GACjCA,EAAaC","file":"static/js/main.06d0ec2c.chunk.js","sourcesContent":["const DEFAULT_NODE = 'paragraph'; // Define the default node type.\n\nexport default DEFAULT_NODE;\n","const schema = {\n    blocks: {\n        image: {\n            isVoid: true,\n        },\n    },\n};\n\nexport default schema;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nexport const Button = styled('span')`\n  cursor: pointer;\n  color: ${props => (props.reversed\n        ? props.active ? 'white' : '#0078FF'\n        : props.active ? '#00E89D' : 'white')};\n`;\n\nexport const Icon = styled(({ className, ...rest }) => <span className={`material-icons ${className}`} {...rest} />)`\n  font-size: 18px;\n  vertical-align: text-bottom;\n`;\n\nexport const Menu = styled('div')`\n  & > * {\n    display: inline-block;\n  }\n\n  & > * + * {\n    margin-left: 15px;\n  }\n`;\n\nexport const Toolbar = styled(Menu)`\n  position: relative;\n  padding: 10px 18px;\n  margin: 0px -15px;\n  margin-bottom: 20px;\n  background-color: #3C4858;\n  border-radius: 0.25rem !important;\n`;\n\nexport const Image = styled('img')`\ndisplay: block;\nmax-width: 100%;\nmax-height: 20em;\nbox-shadow: ${props => (props.selected ? '0 0 0 2px blue;' : 'none')};\n`;\n","import React, { Component } from 'react';\nimport { Editor, getEventRange, getEventTransfer } from 'slate-react';\nimport { Value } from 'slate';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { withAlert } from 'react-alert';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { isKeyHotkey } from 'is-hotkey';\nimport imageExtensions from 'image-extensions';\nimport isUrl from 'is-url';\nimport initialValue from './value.json';\nimport DEFAULT_NODE from './_config';\nimport schema from './_schema';\nimport {\n    Button,\n    Icon,\n    Toolbar,\n    Image,\n} from './components';\n\n\n/**\n * Define hotkey matchers.\n *\n * @type {Function}\n */\n\nconst isBoldHotkey = isKeyHotkey('mod+b');\nconst isItalicHotkey = isKeyHotkey('mod+i');\nconst isUnderlinedHotkey = isKeyHotkey('mod+u');\nconst isCodeHotkey = isKeyHotkey('mod+`');\nconst isTabHotkey = isKeyHotkey('tab');\nconst isShiftTabHotkey = isKeyHotkey('shift+tab');\n\n/*\n* A function to determine whether a URL has an image extension.\n*\n* @param {String} url\n* @return {Boolean}\n*/\n\nconst isImage = url => (!!imageExtensions.find(url.endsWith));\n\n/**\n * A change function to standardize inserting images.\n *\n * @param {Editor} editor\n * @param {String} src\n * @param {Range} target\n */\n\nconst insertImage = (editor, src, target) => {\n    if (target) {\n        editor.select(target);\n    }\n\n    editor.insertBlock({\n        type: 'image',\n        data: { src },\n    });\n};\n\n/**\n * Read Data from localstorage or from json file\n */\nconst storedValue = JSON.parse(localStorage.getItem('data'));\nconst data = Value.fromJSON(storedValue || initialValue);\nconst storedNodeLimit = localStorage.getItem('nodeLimit');\n\nclass DemoEditor extends Component {\n    state = {\n        value: data,\n        openSettingsMenu: false,\n        nodeLimit: storedNodeLimit || 0,\n        saveButtonDisabled: false,\n        alert: null,\n        imageUrl: null,\n    }\n\n    componentDidMount() {\n        const { nodeLimit } = this.state;\n        /**\n         * Disable save button on reload if current node excid the node limit\n         */\n        this.setState({\n            saveButtonDisabled: !!(parseInt(nodeLimit, 10) !== 0 && this.blockCounter() > parseInt(nodeLimit, 10)),\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { imageUrl } = this.state;\n        /**\n         * Reject url if there is no url\n         * Set url from prompt\n         * Show image in editor\n         *\n         */\n        if (prevState.imageUrl !== imageUrl) {\n            if (!imageUrl) return;\n            this.editor.command(insertImage, imageUrl);\n        }\n    }\n\n    /**\n    * Check if the current selection has a mark with `type` in it.\n    *\n    * @param {String} type\n    * @return {Boolean}\n    */\n\n    hasMark = (type) => {\n        const { value } = this.state;\n        return value.activeMarks.some(mark => mark.type === type);\n    }\n\n    /**\n    * Check if the any of the currently selected blocks are of `type`.\n    *\n    * @param {String} type\n    * @return {Boolean}\n    */\n\n    hasBlock = (type) => {\n        const { value } = this.state;\n        return value.blocks.some(node => node.type === type);\n    }\n\n    /**\n    * Store a reference to the `editor`.\n    *\n    * @param {Editor} editor\n    */\n\n    ref = (editor) => {\n        this.editor = editor;\n    }\n\n    /**\n    * Render a mark-toggling toolbar button.\n    *\n    * @param {String} type\n    * @param {String} icon\n    * @return {Element}\n    */\n\n    renderMarkButton = (type, icon) => {\n        const isActive = this.hasMark(type);\n\n        return (\n            <Button active={isActive} onMouseDown={event => this.onClickMark(event, type)}>\n                <Icon>{icon}</Icon>\n            </Button>\n        );\n    }\n\n    /**\n    * Render a block-toggling toolbar button.\n    *\n    * @param {String} type\n    * @param {String} icon\n    * @return {Element}\n    */\n\n    renderBlockButton = (type, icon) => {\n        let isActive = this.hasBlock(type);\n\n        if (['numbered-list', 'bulleted-list'].includes(type)) {\n            const { value } = this.state;\n            const { document, blocks } = value;\n\n            if (blocks.size > 0) {\n                const parent = document.getParent(blocks.first().key);\n                isActive = this.hasBlock('list-item') && parent && parent.type === type;\n            }\n        }\n        if (['imageBrowser'].includes(type)) {\n            return (\n                <div className=\"upload-btn-wrapper\">\n                    <Button active={isActive}>\n                        <Icon>{icon}</Icon>\n                        <input type=\"file\" id=\"input-button\" onChange={event => this.onClickBlock(event, type)} />\n                    </Button>\n                </div>\n            );\n        }\n        return (\n            <Button active={isActive} onMouseDown={event => this.onClickBlock(event, type)}>\n                <Icon>{icon}</Icon>\n            </Button>\n        );\n    }\n\n    /**\n    * Render a Slate node.\n    *\n    * @param {Object} props\n    * @return {Element}\n    */\n\n    renderNode = (props, editor, next) => {\n        const {\n            attributes,\n            children,\n            node,\n            isFocused,\n        } = props;\n\n        switch (node.type) {\n        case 'block-quote':\n            return <blockquote {...attributes}>{children}</blockquote>;\n        case 'bulleted-list':\n            return <ul {...attributes}>{children}</ul>;\n        case 'heading-one':\n            return <h1 {...attributes}>{children}</h1>;\n        case 'heading-two':\n            return <h2 {...attributes}>{children}</h2>;\n        case 'list-item':\n            return <li {...attributes}>{children}</li>;\n        case 'numbered-list':\n            return <ol {...attributes}>{children}</ol>;\n        case 'image': {\n            const src = node.data.get('src');\n            return <Image src={src} selected={isFocused} {...attributes} />;\n        }\n        default:\n            return next();\n        }\n    }\n\n    /**\n    * Render a Slate mark.\n    *\n    * @param {Object} props\n    * @return {Element}\n    */\n\n    renderMark = (props, editor, next) => {\n        const { children, mark, attributes } = props;\n\n        switch (mark.type) {\n        case 'bold':\n            return <strong {...attributes}>{children}</strong>;\n        case 'code':\n            return <code {...attributes}>{children}</code>;\n        case 'italic':\n            return <em {...attributes}>{children}</em>;\n        case 'underlined':\n            return <u {...attributes}>{children}</u>;\n        default:\n            return next();\n        }\n    }\n\n    /**\n    * On change, save the new `value`.\n    * Set save button disabled status\n    *\n    * @param {Object} value\n    */\n\n    onChange = ({ value }) => {\n        const { nodeLimit } = this.state;\n        this.setState({\n            saveButtonDisabled: !!(parseInt(nodeLimit, 10) !== 0 && this.blockCounter() > parseInt(nodeLimit, 10)),\n            value,\n        });\n    }\n\n    /**\n     * On key down, if it's a formatting command toggle a mark.\n     *\n     * @param {Event} event\n     * @param {Editor} editor\n     * @return {Change}\n     */\n\n    // eslint-disable-next-line consistent-return\n    onKeyDown = (event, editor, next) => {\n        let mark;\n\n        const { value } = editor;\n        const { document } = value;\n\n        const block = value.blocks.first();\n        const parent = block ? document.getParent(block.key) : null;\n\n        if (isTabHotkey(event)) {\n            const previousSibling = document.getPreviousSibling(block.key);\n            const type = !parent.type ? 'bulleted-list' : parent.type;\n            mark = type;\n\n            // If no previous sibling exists, return\n            if (!previousSibling) {\n                event.preventDefault();\n                return next();\n            }\n\n            // check whether it's already in 3rd level\n            const depth = document.getDepth(block.key);\n            if (depth > 3) {\n                event.preventDefault();\n                return next();\n            }\n\n            if (parent) {\n                editor.setBlocks('list-item').wrapBlock(type);\n            }\n        } else if (isShiftTabHotkey(event)) {\n            const type = !parent.type ? 'bulleted-list' : parent.type;\n            mark = type;\n\n            // if multi level list items are selected for shift+tab, then return\n            const firstBlockDepth = block && document.getDepth(block.key);\n            let multiLevelSelected = false;\n            value.blocks.map((currentKey) => {\n                const currentDepth = document.getDepth(currentKey.key);\n                multiLevelSelected = !!(firstBlockDepth !== currentDepth);\n                return true;\n            });\n            if (multiLevelSelected) return next();\n\n            // if first level list-items selected then, make paragraph\n            if (parent && typeof parent.type === 'undefined') {\n                editor\n                    .setBlocks(DEFAULT_NODE)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n                return next();\n            }\n\n            const isActive = this.hasBlock('list-item') && block && (parent.type === 'numbered-list' || parent.type === 'bulleted-list');\n\n            if (isActive) {\n                editor\n                    .setBlocks('list-item')\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            } else {\n                editor\n                    .setBlocks(DEFAULT_NODE)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            }\n        } else if (isBoldHotkey(event)) {\n            mark = 'bold';\n        } else if (isItalicHotkey(event)) {\n            mark = 'italic';\n        } else if (isUnderlinedHotkey(event)) {\n            mark = 'underlined';\n        } else if (isCodeHotkey(event)) {\n            mark = 'code';\n        } else {\n            return next();\n        }\n\n        event.preventDefault();\n        editor.toggleMark(mark);\n    }\n\n    /**\n     * When a mark button is clicked, toggle the current mark.\n     *\n     * @param {Event} event\n     * @param {String} type\n     */\n\n    onClickMark = (event, type) => {\n        event.preventDefault();\n        this.editor.toggleMark(type);\n    }\n\n    /**\n     * Image URl prompt\n     *\n     */\n    getImageUrlPrompt = () => {\n        const hideAlert = () => {\n            this.setState({\n                alert: null,\n            });\n        };\n        const getAlert = () => (\n            <SweetAlert\n              input\n              showCancel\n              cancelBtnBsStyle=\"default\"\n              confirmBtnBsStyle=\"success\"\n              title=\"Pleae enter image url\"\n              placeHolder=\"Enter image url\"\n              onConfirm={(value) => {\n                    this.setState({\n                        imageUrl: value,\n                    });\n                    hideAlert();\n                }}\n              onCancel={() => hideAlert()}\n            >\n                &nbsp;\n            </SweetAlert>\n        );\n\n        this.setState({\n            alert: getAlert(),\n        });\n    }\n\n    /**\n     * When a block button is clicked, toggle the block type.\n     *\n     * @param {Event} event\n     * @param {String} type\n     */\n\n    onClickBlock = (event, type) => {\n        event.preventDefault();\n\n        const { editor } = this;\n        const { value } = editor;\n        const { document } = value;\n        const { alert } = this.props;\n\n        if (['image'].includes(type)) {\n            // Show URl prompt\n            this.getImageUrlPrompt();\n        }\n\n        if (['imageBrowser'].includes(type)) {\n            /**\n             * Convert image in base64\n             * Validate Image type\n             *\n             * @param {File} file\n             */\n            const getBase64 = file => new Promise((resolve, reject) => {\n                const reader = new FileReader();\n                if (file.type !== 'image/jpeg') {\n                    alert.error('Only JPEG file');\n                    return;\n                }\n                reader.readAsDataURL(file);\n                reader.onload = () => resolve(reader.result);\n                reader.onerror = error => reject(error);\n            });\n            getBase64(event.currentTarget.files[0])\n                .then((imageData) => {\n                    // Show image in editor\n                    editor.command(insertImage, imageData);\n                });\n        }\n\n        // Handle everything but list buttons.\n        if (type !== 'bulleted-list' && type !== 'numbered-list') {\n            const isActive = this.hasBlock(type);\n            const isList = this.hasBlock('list-item');\n\n            if (isList) {\n                editor\n                    .setBlocks(isActive ? DEFAULT_NODE : type)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            } else {\n                editor.setBlocks(isActive ? DEFAULT_NODE : type);\n            }\n        } else {\n        // Handle the extra wrapping required for list buttons.\n            const isList = this.hasBlock('list-item');\n            const isType = value.blocks.some(block => !!document.getClosest(block.key, parent => parent.type === type));\n\n            if (isList && isType) {\n                editor\n                    .setBlocks(DEFAULT_NODE)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            } else if (isList) {\n                editor\n                    .unwrapBlock(\n                        type === 'bulleted-list' ? 'numbered-list' : 'bulleted-list',\n                    )\n                    .wrapBlock(type);\n            } else {\n                editor.setBlocks('list-item').wrapBlock(type);\n            }\n        }\n    }\n\n    /**\n     * Show node limit set box\n     *\n     */\n    openSettingsTrigger = () => {\n        this.setState(prevState => ({\n            openSettingsMenu: !prevState.openSettingsMenu,\n        }));\n    }\n\n    /**\n     * Set node limit value\n     * Set save button disabled status\n     * @param {Event} event\n     */\n    setNodeLimit = (e) => {\n        e.preventDefault();\n        const { value } = e.target;\n        this.setState({\n            nodeLimit: value,\n            saveButtonDisabled: !!(parseInt(value, 10) !== 0 && this.blockCounter() > parseInt(value, 10)),\n        });\n    };\n\n    /**\n     * Set node limit in localstorage\n     *\n     */\n    saveNodeLimit = () => {\n        const { nodeLimit } = this.state;\n        localStorage.setItem('nodeLimit', nodeLimit);\n    }\n\n    /**\n     * Get current node size\n     *\n     * @return  {number}  current node size\n     */\n    blockCounter = () => {\n        const { editor } = this;\n        const { value } = editor;\n        return value.document.getBlocks().size;\n    }\n\n    /**\n   * On drop, insert the image wherever it is dropped.\n   *\n   * @param {Event} event\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n    onDropOrPaste = (event, editor, next) => {\n        const target = getEventRange(event, editor);\n        if (!target && event.type === 'drop') return next();\n\n        const transfer = getEventTransfer(event);\n        const { type, text, files } = transfer;\n\n        if (type === 'files') {\n            // eslint-disable-next-line no-restricted-syntax\n            for (const file of files) {\n                const reader = new FileReader();\n                const [mime] = file.type.split('/');\n                if (mime !== 'image') continue;\n\n                reader.addEventListener('load', () => {\n                    editor.command(insertImage, reader.result, target);\n                });\n\n                reader.readAsDataURL(file);\n            }\n            return;\n        }\n\n        if (type === 'text') {\n            if (!isUrl(text)) return next();\n            if (!isImage(text)) return next();\n            editor.command(insertImage, text, target);\n            return;\n        }\n\n        next();\n    }\n\n    /**\n     * Set current editor data in localstorage\n     *\n     */\n    saveData = () => {\n        const { value } = this.state;\n        const currentData = JSON.stringify(value.toJSON());\n        localStorage.setItem('data', currentData);\n    }\n\n    /**\n     * Reset unsaved data\n     * If no data in localstorage, get initial data\n     */\n    cancelChanges = () => {\n        const currentStoredData = JSON.parse(localStorage.getItem('data'));\n        const previousData = Value.fromJSON(currentStoredData || initialValue);\n        this.setState({\n            value: previousData,\n        });\n    }\n\n    /**\n    * Render.\n    *\n    * @return {Element}\n    */\n\n    render() {\n        const {\n            value,\n            openSettingsMenu,\n            nodeLimit,\n            saveButtonDisabled,\n            alert,\n        } = this.state;\n\n        return (\n            <div>\n                <Toolbar>\n                    {this.renderMarkButton('bold', 'format_bold')}\n                    {this.renderMarkButton('italic', 'format_italic')}\n                    {this.renderMarkButton('underlined', 'format_underlined')}\n                    {this.renderMarkButton('code', 'code')}\n                    {this.renderBlockButton('heading-one', 'looks_one')}\n                    {this.renderBlockButton('heading-two', 'looks_two')}\n                    {this.renderBlockButton('block-quote', 'format_quote')}\n                    {this.renderBlockButton('numbered-list', 'format_list_numbered')}\n                    {this.renderBlockButton('bulleted-list', 'format_list_bulleted')}\n                    {this.renderBlockButton('image', 'image')}\n                    {this.renderBlockButton('imageBrowser', 'cloud_upload')}\n                    <div className=\"float-right\">\n                        <div className=\"dropdown\">\n                            <button onClick={this.openSettingsTrigger} className=\"btn btn-sm\" type=\"button\">\n                                <Icon className=\"text-success\">settings</Icon>\n                            </button>\n                            <div className={`dropdown-menu dropdown-menu-right ${openSettingsMenu ? 'd-block' : 'd-none'}`}>\n                                <div className=\"dropdown-item px-3\">\n                                    <div className=\"form-group mb-2\">\n                                        <label className=\"small text-muted mb-0\" htmlFor=\"lineLimit\">\n                                            Node limit (Keep 0 if there is no limit)\n                                            <input type=\"number\" value={nodeLimit} name=\"lineLimit\" onChange={this.setNodeLimit} className=\"form-control mt-2\" id=\"lineLimit\" placeholder=\"Enter number\" />\n                                        </label>\n                                    </div>\n                                </div>\n                                <div className=\"dropdown-item px-3\">\n                                    <button onClick={this.saveNodeLimit} type=\"button\" className=\"btn btn-sm btn-success float-right ml-2\">Save</button>\n                                    <button onClick={this.openSettingsTrigger} type=\"button\" className=\"btn btn-sm btn-light float-right\">Close</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </Toolbar>\n                <Editor\n                  spellCheck\n                  autoFocus\n                  placeholder=\"Enter some rich text...\"\n                  ref={this.ref}\n                  value={value}\n                  onChange={this.onChange}\n                  onKeyDown={this.onKeyDown}\n                  renderNode={this.renderNode}\n                  renderMark={this.renderMark}\n                  schema={schema}\n                  onDrop={this.onDropOrPaste}\n                  onPaste={this.onDropOrPaste}\n                />\n                <hr />\n                <button onClick={this.saveData} disabled={`${saveButtonDisabled ? 'disabled' : ''}`} type=\"button\" className=\"btn btn-success float-right ml-2\">Save</button>\n                <button onClick={this.cancelChanges} type=\"button\" className=\"btn btn-danger float-right\">Cancel</button>\n                {alert}\n            </div>\n        );\n    }\n}\n\nexport default withAlert(DemoEditor);\n","import React from 'react';\n\nconst Header = () => (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-dark\">\n        <div className=\"mx-auto\">\n            <div className=\"navbar-brand mx-auto text-success text-center\">\n                <p className=\"h5 font-weight-light\">Twisker - Slate Demo </p>\n                <p className=\"small mb-0 font-weight-light\">\n                    Created By\n                    <b>Monzoor</b>\n                </p>\n            </div>\n        </div>\n    </nav>\n);\n\nexport default Header;\n","import React, { Component } from 'react';\nimport '../assets/scss/App.scss';\nimport SlateEditor from './Editor/Editor';\nimport Header from './Common/Header';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <div className=\"container pt-5\">\n                    <div className=\"row\">\n                        <div className=\"col-8 mx-auto border rounded pb-3\">\n                            <SlateEditor />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as AlertProvider } from 'react-alert';\nimport AlertTemplate from 'react-alert-template-basic';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst options = {\n    position: 'top center',\n    timeout: 5000,\n    offset: '30px',\n    transition: 'scale',\n};\n\nReactDOM.render(\n    <AlertProvider template={AlertTemplate} {...options}>\n        <App />\n    </AlertProvider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}